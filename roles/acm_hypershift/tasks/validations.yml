---
- name: "Check for role allowed providers"
  ansible.builtin.fail:
    msg: "{{ ah_cluster_type }} provider is not supported by this role"
  when:
    - ah_cluster_type | lower not in ah_cluster_types

- name: Assert requirements
  ansible.builtin.assert:
    that: ah_hcp_cli_path is defined

- name: "Check for metallb instances"
  kubernetes.core.k8s_info:
    api_version: metallb.io/v1beta1
    kind: MetalLB
  register: mlb_instance

- name: "Check if a metallb instance exists"
  ansible.builtin.fail:
    msg:
      - "A MetalLB instance is required to configure hypershift on baremetal environments"
  when:
    - mlb_instance.resources | length == 0

- name: Check pull secret file
  ansible.builtin.stat:
    path: "{{ ah_pullsecret_file }}"
  register: ah_ps_file
  failed_when: not ah_ps_file.stat.exists
  when: ah_pullsecret_file | length
  no_log: true

- name: Check CA bundle file
  ansible.builtin.stat:
    path: "{{ ah_ca_bundle_file }}"
  register: ah_ca_file
  failed_when: not ah_ca_file.stat.exists
  when:
    - ah_ca_bundle_file is defined
    - ah_ca_bundle_file | length

- name: Check hypershift namespace is present
  kubernetes.core.k8s_info:
    kind: Namespace
    name: hypershift
  register: ah_ns
  retries: 12
  delay: 10
  until: ah_ns.resources | length

- name: Get hypershift supported versions
  kubernetes.core.k8s_info:
    kind: ConfigMap
    name: supported-versions
    namespace: hypershift
  register: ah_supported_versions

- name: Check for unsupported hypershift versions
  vars:
    short_ver: "{{ '.'.join(ah_ocp_version.split('-')[0].split('.')[:2]) }}"
  ansible.builtin.fail:
    msg: "{{ ah_ocp_version }} is not supported in hypershift"
  failed_when: >
    not short_ver in (
    ( ah_supported_versions.resources[0].data |
      from_yaml)['supported-versions'] |
    from_yaml)['versions']

- name: Check for a default storage class
  vars:
    query_default_sc: 'resources[*].metadata.annotations."storageclass.kubernetes.io/is-default-class"'
    query_results: "{{ ah_sc | json_query(query_default_sc) }}"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: StorageClass
  register: ah_sc
  failed_when: not 'true' in query_results

- name: "Check for valid control plane availability policy"
  ansible.builtin.fail:
    msg: "Control plane availability policy '{{ ah_control_plane_availability_policy }}' is not supported"
  when:
    - ah_control_plane_availability_policy is defined
    - ah_control_plane_availability_policy not in ah_control_plane_availability_policies
...
