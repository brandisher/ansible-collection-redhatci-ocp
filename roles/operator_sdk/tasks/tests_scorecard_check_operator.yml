---
- name: Set directories for artifacts and operator bundle extract
  ansible.builtin.set_fact:
    scorecard_artifacts: "{{ scorecard_tmp_dir.path }}/artifacts"
    scorecard_operator_dir: "{{ scorecard_tmp_dir.path }}/scorecard_operator_dir"

- name: Create nested directories for artifacts and operator bundle extract
  ansible.builtin.file:
    path: "{{ scorecard_dir_to_create }}"
    state: directory
    mode: "0744"
  loop:
    - "{{ scorecard_artifacts }}"
    - "{{ scorecard_operator_dir }}"
  loop_control:
    loop_var: scorecard_dir_to_create

- name: Extract operator bundle and add read permissions
  ansible.builtin.shell:
    cmd: >
      {{ scorecard_oc_tool_path }}
      image extract {{ operator.bundle_image }}
      --confirm -a {{ scorecard_partner_creds }};
      chmod -R go+r ./
    chdir: "{{ scorecard_operator_dir }}"

- name: Print extracted operator data
  ansible.builtin.command: tree "{{ scorecard_operator_dir }}"
  ignore_errors: true

# In the disconnected env, the catalog is generated by mirroring role
- name: Retrieve operator index image in the connected environment
  ansible.builtin.set_fact:
    oo_index: "{{ operator.index_image }}"
  when: not scorecard_dci_disconnected | default(false) | bool

- name: Template scorecard config
  ansible.builtin.template:
    src: templates/scorecard-test-config.yaml.j2
    dest: "{{ scorecard_artifacts }}/scorecard-test-config.yaml"
    mode: "0644"

- name: Set path to scorecard config
  ansible.builtin.set_fact:
    scorecard_config_path: "{{ scorecard_artifacts }}/scorecard-test-config.yaml"

- name: Create namespace for scorecard testing
  kubernetes.core.k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ scorecard_namespace }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: "baseline"
          pod-security.kubernetes.io/warn: "baseline"

- name: Set prefix for scorecard output files
  vars:
    operator_name: "{{ operator.bundle_image.split('@')[0].split('/')[-1] }}"
  ansible.builtin.set_fact:
    scorecard_prefix: "scorecard_{{ operator_name }}"

- name: Run scorecard
  block:
    - name: Run operator-sdk scorecard with basic-check-spec-test
      environment:
        OPENSHIFT_AUTH: "{{ scorecard_partner_creds }}"
        OO_BUNDLE: "{{ operator.bundle_image }}"
        OO_INDEX: "{{ oo_index }}"
        ARTIFACT_DIR: "{{ scorecard_artifacts }}"
      ansible.builtin.shell:
        cmd: >
          ./operator-sdk scorecard
          --output xunit
          --selector=test=basic-check-spec-test
          --kubeconfig "{{ scorecard_kubeconfig_path }}"
          --namespace {{ scorecard_namespace }}
          --service-account default
          --config "{{ scorecard_config_path }}"
          --verbose
          --wait-time 300s
          "{{ scorecard_operator_dir }}"
        chdir: "{{ scorecard_tmp_dir.path }}"
      register: scorecard_exec
  rescue:
    - name: Get Scorecard pods
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ scorecard_namespace }}"
      register: scorecard_pods

    - name: Get scorecard-related events
      kubernetes.core.k8s_info:
        kind: Event
        namespace: "{{ scorecard_namespace }}"
      register: scorecard_events

    - name: Dump scorecard errors into logs
      ansible.builtin.template:
        src: templates/scorecard-errors-basic-check-spec-test.j2
        dest: "{{ scorecard_job_logs.path }}/{{ scorecard_prefix }}_errors_basic_check_spec_test.json"
        mode: "0644"

- name: Copy scorecard basic-check-spec-test output into logs
  ansible.builtin.copy:
    content: "{{ scorecard_exec.stdout }}"
    dest: "{{ scorecard_job_logs.path }}/{{ scorecard_prefix }}_basic_check_spec_test.xml"
    mode: "0644"

- name: Run operator-sdk scorecard with suite=olm
  ansible.builtin.shell:
    cmd: >
      ./operator-sdk scorecard
      --output xunit
      --selector=suite=olm
      --kubeconfig "{{ scorecard_kubeconfig_path }}"
      --namespace "{{ scorecard_namespace }}"
      --service-account default
      --config "{{ scorecard_config_path }}"
      --verbose
      --wait-time 300s
      "{{ scorecard_operator_dir }}"
    chdir: "{{ scorecard_tmp_dir.path }}"
  environment:
    OPENSHIFT_AUTH: "{{ scorecard_partner_creds }}"
    OO_BUNDLE: "{{ operator.bundle_image }}"
    OO_INDEX: "{{ oo_index }}"
    ARTIFACT_DIR: "{{ scorecard_artifacts }}"
  register: scorecard_exec
  ignore_errors: true

- name: Copy scorecard olm-suite output into logs
  ansible.builtin.copy:
    content: "{{ scorecard_exec.stdout }}"
    dest: "{{ scorecard_job_logs.path }}/{{ scorecard_prefix }}_suite_olm.xml"
    mode: "0644"

- name: Delete namespace used for scorecard testing
  kubernetes.core.k8s:
    name: "{{ scorecard_namespace }}"
    api_version: v1
    kind: Namespace
    state: absent

- name: Delete nested directories for artifacts and operator bundle extract
  ansible.builtin.file:
    path: "{{ scorecard_dir_to_del }}"
    state: absent
  loop:
    - "{{ scorecard_artifacts }}"
    - "{{ scorecard_operator_dir }}"
  loop_control:
    loop_var: scorecard_dir_to_del

- name: Check state of scorecard
  block:
    - name: Wait until namespace is unstuck
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ scorecard_namespace }}"
      register: stuck_namespace
      until: stuck_namespace.resources | length == 0
      retries: 6
      delay: 10
  rescue:
    - name: Get scorecard-related events
      kubernetes.core.k8s_info:
        kind: Event
        namespace: "{{ scorecard_namespace }}"
      register: scorecard_events

    - name: Get pods from the scorecard namespace
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ scorecard_namespace }}"
      register: scorecard_pods

    - name: Upload the logs for stuck pod into DCI
      ansible.builtin.template:
        src: "templates/scorecard-debug-pod-logs.j2"
        dest: "{{ scorecard_job_logs.path }}/{{ scorecard_prefix }}_logs_for_stuck_pod.log"
        mode: "0644"
...
